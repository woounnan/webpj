{"remainingRequest":"/work/webpj/front/node_modules/babel-loader/lib/index.js!/work/webpj/front/node_modules/cache-loader/dist/cjs.js??ref--0-0!/work/webpj/front/node_modules/vue-loader/lib/index.js??vue-loader-options!/work/webpj/front/node_modules/basic-vue-chat/src/components/basic-vue-chat/BasicVueChat.vue?vue&type=script&lang=js&","dependencies":[{"path":"/work/webpj/front/node_modules/basic-vue-chat/src/components/basic-vue-chat/BasicVueChat.vue","mtime":1585582181076},{"path":"/work/webpj/front/node_modules/cache-loader/dist/cjs.js","mtime":1585582181108},{"path":"/work/webpj/front/node_modules/babel-loader/lib/index.js","mtime":1585582181044},{"path":"/work/webpj/front/node_modules/cache-loader/dist/cjs.js","mtime":1585582181108},{"path":"/work/webpj/front/node_modules/vue-loader/lib/index.js","mtime":1585582184324}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport moment from 'moment';\nimport { scrollToBottom } from \"../../helpers/scroll.js\";\nimport MessagesList from \"./messages/MessagesList.vue\";\nimport InputContainer from \"./input/InputContainer.vue\";\nimport axios from 'axios';\nexport default {\n  name: 'BasicVueChat',\n  components: {\n    MessagesList: MessagesList,\n    InputContainer: InputContainer\n  },\n  props: {\n    title: {\n      type: String,\n      default: 'Chat',\n      required: false\n    },\n    initialAuthorId: {\n      type: Number,\n      default: 0,\n      required: false\n    },\n    attachMock: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    initialFeed: {\n      type: Array,\n      default: function _default() {\n        return [];\n      },\n      required: false\n    },\n    newMessage: {\n      type: Object,\n      default: function _default() {\n        return {};\n      },\n      required: false\n    }\n  },\n  data: function data() {\n    return {\n      feed: [],\n      authorId: this.$store.getters.getUser.id,\n      toggleEmojiPicker: false,\n      to: ''\n    };\n  },\n  watch: {\n    newMessage: function newMessage(newValue, oldValue) {\n      console.log('scrollbottom');\n      this.pushToFeed(newValue);\n      scrollToBottom();\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    if (this.attachMock) {\n      import(\"./mocks/mock-messages-list.js\").then(function (mockData) {\n        _this.feed = mockData.default.feed;\n\n        _this.setAuthorId(mockData.default.authorId);\n      }).catch(function (error) {\n        console.error('Failed to load mock data from file. ', error);\n      });\n    } else {\n      this.feed = this.initialFeed;\n    }\n\n    console.log('BasicChat::::', this.title);\n    this.recvMsg();\n    this.setRoom(this.title); //Set when the window is opened later\n\n    this.$store.state.bus.$on('openDial', function () {\n      console.log('receive openDial!!!::::', _this.title);\n\n      _this.setRoom(_this.title);\n    });\n  },\n  created: function created() {//create Component\n    //enroll Callback receiving msg from server\n  },\n  methods: {\n    setRoom: function setRoom(to) {\n      var _this2 = this;\n\n      //to is partner\n      console.log('BasicChat.vue:::call setRoom');\n      axios.post('http://webhacker.xyz:8000/apis/db/getChat', {\n        srcId: this.$store.getters.getUser.id,\n        to: to\n      }).then(function (r) {\n        _this2.feed = r.data.convs;\n        scrollToBottom();\n      }).catch(function (e) {\n        return console.error(e.message);\n      });\n    },\n    recvMsg: function recvMsg() {\n      var _this3 = this;\n\n      console.log('call recvMsg!!!!!');\n      this.$store.state.socks.sock.on('msg', function (data) {\n        //Data received is processed at here\n        if (data.header.to === _this3.$store.getters.getUser.position && _this3.$store.getters.getRoom.indexOf(data.header.from) != -1) {\n          _this3.onNewOwnMessage(data.msg);\n        }\n      }); //send work\n\n      var eve = 'work';\n\n      if (this.$store.getters.getMountedCheck.indexOf(eve) == -1) {\n        this.$store.commit('pushMountedCheck', eve);\n        this.$store.state.bus.$on(eve, function (data) {\n          /* process when multiple receiver exist */\n\n          /* code here */\n          //수신자 배열을 루프돌아서 동일한 work 메시지를 전송시킨다.\n          console.log('selects in BasicChat.vue::::', data);\n          var selects = data.selects;\n          delete data['selects'];\n          console.log('check delete ::: BasicChat.vue :::', data);\n          var selDivisions = [];\n          var others = _this3.$store.getters.getOthers;\n          selects.forEach(function (ele) {\n            //보내는 대상이 부서면\n            if (_this3.$store.getters.getDivisions.indexOf(ele) != -1) {\n              //전체 유저 검색\n              for (var i = 0; i < others.length; i++) {\n                if (others[i].division == ele) {\n                  _this3.setInput('', '', '', data, others[i].position);\n                }\n              } //나중에 또 안보내기 위해서 보낸 부서는 저장\n\n\n              selDivisions.push(ele);\n            }\n          }); //부서 설정이 아닌 사람 대상인 경우에 대해 보내기\n\n          selects.forEach(function (ele) {\n            if (selDivisions.indexOf(ele) != -1) {} else {\n              _this3.setInput('', '', '', data, ele);\n            }\n          });\n        });\n      }\n    },\n    setInput: function setInput(message, image, imageUrl, works, to) {\n      var _this4 = this;\n\n      var msg = {\n        id: this.authorId,\n        position: this.$store.getters.getUser.position,\n        contents: message,\n        image: image,\n        imageUrl: imageUrl,\n        date: moment().format('HH:mm:ss'),\n        works: works\n      };\n\n      if (works != undefined) {\n        console.log('set flag_date in BasicChat::::');\n        works.flag_date = msg.date;\n      }\n\n      if (to === undefined) {\n        to = this.title;\n      }\n\n      var header = {\n        to: to,\n        from: this.$store.getters.getUser.position\n      };\n      this.$store.state.socks.sock.emit('msg', {\n        msg: msg,\n        header: header\n      });\n\n      if (works != undefined) {\n        setTimeout(function () {\n          _this4.$store.state.socks.sock.emit('sock_initWorks', {\n            id: _this4.$store.getters.getUser.id\n          });\n\n          _this4.$store.commit('initWorks');\n        }, 50);\n      }\n\n      console.log('이사람에게 보냈어::::', to);\n\n      if (to === this.title) {\n        this.onNewOwnMessage(msg);\n        console.log('TTTTAAAA');\n      }\n    },\n    setEmojiPickerToggle: function setEmojiPickerToggle(toggle) {\n      this.toggleEmojiPicker = toggle;\n    },\n    pushToFeed: function pushToFeed(element) {\n      this.feed.push(element);\n      setTimeout(function () {\n        scrollToBottom();\n      }, 100);\n    },\n    onNewOwnMessage: function onNewOwnMessage(data) {\n      this.pushToFeed(data);\n    },\n    onOpenEmojiPicker: function onOpenEmojiPicker(toggle) {\n      this.setEmojiPickerToggle(toggle);\n    }\n  }\n};",{"version":3,"sources":["BasicVueChat.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div\r\n    class=\"basic-vue-chat\"\r\n    @click=\"setEmojiPickerToggle(false)\">\r\n    <section class=\"window\">\r\n      <header class=\"window__header__container\">\r\n        <slot name=\"header\">\r\n          {{ title }}\r\n        </slot>\r\n      </header>\r\n      <section\r\n        id=\"window__messages__container\"\r\n        class=\"window__messages__container\">\r\n        <slot>\r\n          <messages-list\r\n            :feed=\"feed\"\r\n            :author-id=\"authorId\"\r\n            class=\"messages-list\" />\r\n        </slot>\r\n      </section>\r\n      <div class=\"window__input__container\">\r\n        <slot name=\"input-container\">\r\n          <input-container\r\n            :sel=\"title\"\r\n            :toggle-emoji-picker=\"toggleEmojiPicker\"\r\n            @newOwnMessage=\"setInput\"\r\n            @openEmojiPicker=\"onOpenEmojiPicker\"\r\n          />\r\n        </slot>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport moment from 'moment'\r\nimport { scrollToBottom } from '../../helpers/scroll.js'\r\nimport MessagesList from './messages/MessagesList.vue'\r\nimport InputContainer from './input/InputContainer.vue'\r\nimport axios from 'axios'\r\nexport default {\r\n  name: 'BasicVueChat',\r\n  components: {\r\n    MessagesList,\r\n    InputContainer,\r\n  },\r\n  props: {\r\n    title: {\r\n      type: String,\r\n      default: 'Chat',\r\n      required: false\r\n    },\r\n    initialAuthorId: {\r\n      type: Number,\r\n      default: 0,\r\n      required: false\r\n    },\r\n    attachMock: {\r\n      type: Boolean,\r\n      default: false,\r\n      required: false\r\n    },\r\n    initialFeed: {\r\n      type: Array,\r\n      default: function () {\r\n        return []\r\n      },\r\n      required: false\r\n    },\r\n    newMessage: {\r\n      type: Object,\r\n      default: function () {\r\n        return {}\r\n      },\r\n      required: false\r\n    }\r\n  },\r\n  data: function () {\r\n    return {\r\n      feed: [],\r\n      authorId : this.$store.getters.getUser.id,\r\n      toggleEmojiPicker: false,\r\n      to : ''\r\n    }\r\n  },\r\n  watch: {\r\n    newMessage: function (newValue, oldValue) {\r\n      console.log('scrollbottom')\r\n      this.pushToFeed(newValue)\r\n      scrollToBottom()\r\n    }\r\n  },\r\n  mounted () {\r\n    if (this.attachMock) {\r\n      import('./mocks/mock-messages-list.js')\r\n        .then(mockData => {\r\n          this.feed = mockData.default.feed\r\n          this.setAuthorId(mockData.default.authorId)\r\n        })\r\n        .catch(error => {\r\n          console.error('Failed to load mock data from file. ', error)\r\n        })\r\n    } else {\r\n      this.feed = this.initialFeed\r\n    }\r\n    console.log('BasicChat::::', this.title)\r\n    this.recvMsg()\r\n    this.setRoom(this.title)\r\n\r\n    //Set when the window is opened later\r\n    this.$store.state.bus.$on('openDial', ()=>{\r\n    console.log('receive openDial!!!::::', this.title)\r\n    this.setRoom(this.title)\r\n    })\r\n  },\r\n  created() {\r\n    //create Component\r\n\r\n    //enroll Callback receiving msg from server\r\n  },\r\n  methods: {\r\n    setRoom(to){\r\n      //to is partner\r\n      console.log('BasicChat.vue:::call setRoom')\r\n      axios.post('http://webhacker.xyz:8000/apis/db/getChat', {srcId: this.$store.getters.getUser.id, to: to})\r\n      .then(r =>{\r\n        this.feed = r.data.convs\r\n        scrollToBottom()\r\n      })\r\n      .catch(e => console.error(e.message))\r\n    },\r\n    recvMsg(){\r\n      console.log('call recvMsg!!!!!')\r\n      this.$store.state.socks.sock.on('msg', data =>{\r\n        //Data received is processed at here\r\n\r\n        if((data.header.to === this.$store.getters.getUser.position) && (this.$store.getters.getRoom.indexOf(data.header.from) != -1)){\r\n            this.onNewOwnMessage(data.msg)\r\n        }\r\n      })\r\n      //send work\r\n      var eve = 'work'\r\n      if(this.$store.getters.getMountedCheck.indexOf(eve) == -1){\r\n        this.$store.commit('pushMountedCheck', eve)\r\n        this.$store.state.bus.$on(eve,  (data)=>{\r\n        /* process when multiple receiver exist */\r\n\r\n        /* code here */\r\n        //수신자 배열을 루프돌아서 동일한 work 메시지를 전송시킨다.\r\n        console.log('selects in BasicChat.vue::::', data)\r\n\r\n        var selects = data.selects\r\n        delete data['selects']\r\n        console.log('check delete ::: BasicChat.vue :::', data)\r\n        var selDivisions = []\r\n        var others = this.$store.getters.getOthers\r\n\r\n        selects.forEach(ele=>{\r\n          //보내는 대상이 부서면\r\n          if(this.$store.getters.getDivisions.indexOf(ele) != -1){\r\n            //전체 유저 검색\r\n              for(var i = 0; i<others.length; i++){\r\n                if(others[i].division == ele){\r\n                  this.setInput('', '', '', data, others[i].position)\r\n                }\r\n              }\r\n                //나중에 또 안보내기 위해서 보낸 부서는 저장\r\n              selDivisions.push(ele)\r\n            }\r\n        })\r\n        //부서 설정이 아닌 사람 대상인 경우에 대해 보내기\r\n        selects.forEach(ele=>{\r\n            if(selDivisions.indexOf(ele) != -1){\r\n            }else{\r\n              this.setInput('', '', '', data, ele)\r\n            }\r\n        })\r\n        \r\n\r\n      })\r\n      }\r\n    },\r\n    setInput(message, image, imageUrl, works, to){\r\n      const msg = {\r\n        id: this.authorId,\r\n        position: this.$store.getters.getUser.position,\r\n        contents: message,\r\n        image: image,\r\n        imageUrl: imageUrl,\r\n        date: moment().format('HH:mm:ss'),\r\n        works: works\r\n      }\r\n      if(works != undefined){\r\n        console.log('set flag_date in BasicChat::::')\r\n        works.flag_date = msg.date\r\n      }\r\n      if(to === undefined){\r\n        to = this.title\r\n      }\r\n      const header = {\r\n        to : to,\r\n        from : this.$store.getters.getUser.position\r\n      }\r\n      this.$store.state.socks.sock.emit('msg', {msg: msg, header: header})\r\n      if(works != undefined){\r\n        setTimeout(()=>{\r\n          this.$store.state.socks.sock.emit('sock_initWorks', {id: this.$store.getters.getUser.id})\r\n          this.$store.commit('initWorks')\r\n        }, 50)\r\n      }\r\n      console.log('이사람에게 보냈어::::', to)\r\n      if(to === this.title){\r\n        this.onNewOwnMessage(msg)\r\n        console.log('TTTTAAAA')\r\n      }\r\n    },\r\n    setEmojiPickerToggle (toggle) {\r\n      this.toggleEmojiPicker = toggle\r\n    },\r\n    pushToFeed (element) {\r\n      this.feed.push(element)\r\n      setTimeout(()=>{\r\n        scrollToBottom()\r\n      }, 100)\r\n    },\r\n    onNewOwnMessage (data) {\r\n      this.pushToFeed(data)\r\n    },\r\n    onOpenEmojiPicker (toggle) {\r\n      this.setEmojiPickerToggle(toggle)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"../../assets/scss/main.scss\";\r\n</style>\r\n"],"sourceRoot":"node_modules/basic-vue-chat/src/components/basic-vue-chat"}]}