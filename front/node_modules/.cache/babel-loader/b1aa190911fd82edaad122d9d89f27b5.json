{"remainingRequest":"/work/webpj/front/node_modules/babel-loader/lib/index.js!/work/webpj/front/node_modules/eslint-loader/index.js??ref--13-0!/work/webpj/front/src/store.js","dependencies":[{"path":"/work/webpj/front/src/store.js","mtime":1585582185032},{"path":"/work/webpj/front/node_modules/cache-loader/dist/cjs.js","mtime":1585582181108},{"path":"/work/webpj/front/node_modules/babel-loader/lib/index.js","mtime":1585582181044},{"path":"/work/webpj/front/node_modules/eslint-loader/index.js","mtime":1585582181736}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport axios from 'axios';\nimport io from 'socket.io-client';\nVue.use(Vuex);\n\nvar getAvatar = function getAvatar(state, position) {\n  var ret = undefined;\n  state.others.forEach(function (x) {\n    if (x.position === position) {\n      ret = x.image;\n      return;\n    }\n  });\n  return ret;\n};\n\nvar getDiff = function getDiff(startDate, endDate) {\n  var diff_start = startDate instanceof Date ? startDate : new Date(startDate);\n  var diff_end = endDate instanceof Date ? endDate : new Date(endDate);\n  diff_start = new Date(diff_start.getFullYear(), diff_start.getMonth() + 1, diff_start.getDate());\n  diff_end = new Date(diff_end.getFullYear(), diff_end.getMonth() + 1, diff_end.getDate());\n  var diff = Math.abs(diff_end.getTime() - diff_start.getTime());\n  diff = Math.ceil(diff / (1000 * 3600 * 24));\n  return diff;\n};\n\nvar regWork = function regWork(state, works, cv, to) {\n  console.log('');\n\n  if (state.user.works.list_keys.indexOf(cv.date) == -1) {\n    //여기서 등록이란건 변수에 저장을 했다는 의미(관리를 위해)\n    //해당 작업은 등록되지 않았으므로 등록처리\n    var diff = getDiff(new Date().toISOString().substr(0, 10), cv.works.endDate);\n    works.push({\n      convs: cv,\n      to: [{\n        position: to,\n        file_save: cv.works.file_c_save,\n        file_real: cv.works.file_c_real,\n        state: cv.works.state_c,\n        //각 클라이언트 state\n        avatar: getAvatar(state, to),\n        flag_upload: cv.works.flag_c_upload,\n        flag_sendDate: cv.works.flag_sendDate,\n        //새로추가\n        comment: cv.works.comment\n      }],\n      due: '- ' + String(diff) + ' days'\n    });\n    state.user.works.list_keys.push(cv.date);\n  } else {\n    //이미 등록이 되어있다\n    //대상만 추가해준다.\n    works.forEach(function (x) {\n      if (x.date === cv.date) {\n        x.to.push({\n          position: to,\n          file_save: cv.works.file_c_save,\n          file_real: cv.works.file_c_real,\n          state: cv.works.state_c,\n          //각 클라이언트 state\n          avatar: getAvatar(state, to),\n          flag_upload: cv.works.flag_c_upload,\n          flag_sendDate: cv.works.flag_sendDate,\n          //새로추가  보낸시간\n          comment: cv.works.comment\n        });\n        console.log('already registered work');\n        return;\n      }\n    });\n  }\n};\n\nexport default new Vuex.Store({\n  state: {\n    bus: new Vue(),\n    tk: undefined,\n    today: '',\n    mountedCheck: [],\n    idxView: undefined,\n    p_work: {\n      idxWork: undefined,\n      idxSep: undefined,\n      idxSepKey: undefined\n    },\n    user: {\n      id: '',\n      position: '',\n      image: '',\n      division: '',\n      company: '',\n      company_division: {},\n      state: '',\n      room: [],\n      room_num: 5,\n      works: {\n        list_keys: [],\n        //date를 push해서 등록되잇는 work를 확인\n        schemaWork: [{\n          to: [{\n            position: String,\n            file_save: String,\n            file_real: String,\n            avatar: String,\n            state: String,\n            flag_upload: Boolean\n          }],\n          convs: undefined,\n          date: String,\n          //primary key\n          title: String,\n          contents: String,\n          favor: Boolean,\n          file_save: String,\n          file_real: String\n        }],\n        toWork: [],\n        //요청작업\n        fromWork: [],\n        //받은작업\n        toNotice: [],\n        //보낸알림\n        fromNotice: [],\n        //받은알림\n        flag_upload: Boolean\n      } //array of convs\n\n    },\n    companys: [],\n    others: [],\n    socks: {\n      sock: undefined\n    }\n  },\n  mutations: {\n    setToday: function setToday(state) {\n      state.today = new Date().toISOString().substr(0, 10);\n      console.log('setToday::::', state.today);\n    },\n    delToken: function delToken(state) {\n      state.tk = null;\n    },\n    setTk: function setTk(state) {\n      state.tk = localStorage.getItem('tk');\n    },\n    initUser: function initUser(state, info) {\n      state.user.id = info.id, state.user.position = info.position, state.user.division = info.division, state.user.company = info.company, state.user.idmage = info.image, state.user.state = '출근';\n    },\n    initOthers: function initOthers(state, info) {\n      state.others = info;\n    },\n    setState: function setState(state, st) {\n      state.user.state = st;\n    },\n    initCompanys: function initCompanys(state) {\n      axios.post(\"http://localhost:3000/apis/db/getCp\").then(function (r) {\n        if (Object.keys(r.data).length > 0) {\n          state.companys = r.data;\n        }\n      }).catch(function (e) {\n        return console.error(e);\n      });\n    },\n    initDivisions: function initDivisions(state) {\n      state.companys.forEach(function (x) {\n        if (x.name === state.user.company) {\n          state.user.company_division = x.division;\n        }\n      });\n    },\n    initSocks: function initSocks(state) {\n      state.socks.sock = io('localhost:8082');\n    },\n    addNewMsg: function addNewMsg(state) {\n      var i = 0;\n      state.others.forEach(function (x) {\n        //새메시지 상태 추가\n        state.others[i]['newMsg'] = {\n          msg: false,\n          work: false,\n          notice: false\n        };\n        i++;\n      });\n    },\n    initWorks: function initWorks(state) {\n      state.user.works = {\n        list_keys: [],\n        toWork: [],\n        //요청작업\n        fromWork: [],\n        //받은작업\n        toNotice: [],\n        //보낸알림\n        fromNotice: [] //받은알림\n\n      };\n      console.log('call initWorks :::');\n      axios.post('http://localhost:3000/apis/db/getWorks', {\n        id: state.user.id\n      }).then(function (r) {\n        r.data.list_works.forEach(function (x) {\n          x.convs.forEach(function (cv) {\n            if (cv.date != cv.works.flag_date) {\n              return;\n            }\n\n            if (cv.works.notice === true) {\n              if (cv.works.by === state.user.id) {\n                //보낸알림 등록\n                regWork(state, state.user.works.toNotice, cv, x.with); //state.user.works.toNotice.splice(0, 1)\n              } else {\n                //받은알림 등록\n                regWork(state, state.user.works.fromNotice, cv, x.with); //state.user.works.fromNotice.splice(0, 1)\n              }\n            } else {\n              if (cv.works.by === state.user.id) {\n                //요청작업 등록\n                regWork(state, state.user.works.toWork, cv, x.with); //state.user.works.toWork.splice(0, 1)\n              } else {\n                //받은작업 등록\n                regWork(state, state.user.works.fromWork, cv, x.with); //state.user.works.fromWork.splice(0, 1)\n              }\n            }\n          });\n        });\n        state.user.works.toWork.forEach(function (x) {\n          var count = 0;\n          console.log('check routine ::: store.js :::');\n          x.to.forEach(function (y) {\n            if (y.state != x.convs.works.state_s) {\n              count++;\n            }\n          });\n\n          if (count == x.to.length) {\n            console.log('서버 상태 업데이트 시키께 ::: store.js :::', x.convs.works.title);\n            x.convs.works.state_s = x.convs.works.state_c;\n            x.convs.works.flag_sender = 'checkPage';\n            state.bus.$emit('sendWork', x);\n          }\n        });\n      }).catch(function (e) {\n        console.error('getWorks in View.vue::::', e);\n      });\n    },\n    find_work: function find_work(state, convs) {\n      if (convs.works.notice === true) {\n        if (convs.works.by === state.user.id) {\n          state.p_work.idxSep = 2;\n          state.p_work.idxSepKey = 'toNotice';\n        } else {\n          state.p_work.idxSep = 3;\n          state.p_work.idxSepKey = 'fromNotice';\n        }\n      } else {\n        if (convs.works.by === state.user.id) {\n          state.p_work.idxSep = 0;\n          state.p_work.idxSepKey = 'toWork';\n        } else {\n          state.p_work.idxSep = 1;\n          state.p_work.idxSepKey = 'fromWork';\n        }\n      }\n\n      var jobs = state.user.works[state.p_work.idxSepKey];\n      console.log('find jobs ::: find_work ::: store.js :::', jobs);\n      console.log('length ::: find_work ::: store.js :::', jobs.length);\n      var i = 0;\n      var ret = 0;\n\n      for (; i < jobs.length; i++) {\n        if (jobs[i].convs.works.flag_date === convs.works.flag_date) {\n          state.p_work.idxWork = i;\n          console.log('find works ::: find_work ::: store.js :::', jobs[state.p_work.idxWork]);\n          break;\n        }\n      }\n    },\n    init_idxWork: function init_idxWork(state, idx_work) {\n      state.p_work.idxWork = idx_work;\n    },\n    init_idxSepKey: function init_idxSepKey(state, idx_sep) {\n      console.log('call init_idxSepkey :::', idx_sep);\n\n      switch (idx_sep) {\n        case 0:\n          state.p_work.idxSepKey = 'toWork';\n          break;\n\n        case 1:\n          state.p_work.idxSepKey = 'fromWork';\n          break;\n\n        case 2:\n          state.p_work.idxSepKey = 'toNotice';\n          break;\n\n        case 3:\n          state.p_work.idxSepKey = 'fromNotice';\n          break;\n      }\n    },\n    initIdxView: function initIdxView(state, idx) {\n      state.idxView = idx;\n      this.commit('initWorks');\n    },\n    addRoom: function addRoom(state, to) {\n      if (state.user.room.indexOf(to) != -1) return;\n\n      if (state.user.room.length < state.user.room_num) {\n        //add new room\n        state.user.room.push(to);\n      } else {\n        state.user.room.pop();\n        state.user.room.push(to);\n      }\n    },\n    closeRoom: function closeRoom(state, idx) {\n      state.user.room.splice(idx, 1);\n    },\n    pushMountedCheck: function pushMountedCheck(state, eve) {\n      state.mountedCheck.push(eve);\n    }\n  },\n  getters: {\n    getUser: function getUser(state) {\n      return state.user;\n    },\n    getOthers: function getOthers(state) {\n      return state.others;\n    },\n    getCompanys: function getCompanys(state) {\n      return state.companys;\n    },\n    getRoom: function getRoom(state) {\n      return state.user.room;\n    },\n    getComponents: function getComponents(state) {\n      return state.components;\n    },\n    getDivisions: function getDivisions(state) {\n      return state.user.company_division;\n    },\n    getWorks: function getWorks(state) {\n      return state.user.works;\n    },\n    getMountedCheck: function getMountedCheck(state) {\n      return state.mountedCheck;\n    },\n    getIdxView: function getIdxView(state) {\n      return state.idxView;\n    },\n    getToday: function getToday(state) {\n      return state.today;\n    }\n  },\n  actions: {}\n});",{"version":3,"sources":["/work/webpj/front/src/store.js"],"names":["Vue","Vuex","axios","io","use","getAvatar","state","position","ret","undefined","others","forEach","x","image","getDiff","startDate","endDate","diff_start","Date","diff_end","getFullYear","getMonth","getDate","diff","Math","abs","getTime","ceil","regWork","works","cv","to","console","log","user","list_keys","indexOf","date","toISOString","substr","push","convs","file_save","file_c_save","file_real","file_c_real","state_c","avatar","flag_upload","flag_c_upload","flag_sendDate","comment","due","String","Store","bus","tk","today","mountedCheck","idxView","p_work","idxWork","idxSep","idxSepKey","id","division","company","company_division","room","room_num","schemaWork","Boolean","title","contents","favor","toWork","fromWork","toNotice","fromNotice","companys","socks","sock","mutations","setToday","delToken","setTk","localStorage","getItem","initUser","info","idmage","initOthers","setState","st","initCompanys","post","then","r","Object","keys","data","length","catch","e","error","initDivisions","name","initSocks","addNewMsg","i","msg","work","notice","initWorks","list_works","flag_date","by","with","count","y","state_s","flag_sender","$emit","find_work","jobs","init_idxWork","idx_work","init_idxSepKey","idx_sep","initIdxView","idx","commit","addRoom","pop","closeRoom","splice","pushMountedCheck","eve","getters","getUser","getOthers","getCompanys","getRoom","getComponents","components","getDivisions","getWorks","getMountedCheck","getIdxView","getToday","actions"],"mappings":"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","sourcesContent":["import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\nimport axios from 'axios'\r\nimport io from 'socket.io-client'\r\nVue.use(Vuex)\r\nvar getAvatar = function(state, position){\r\n  var ret = undefined\r\n  state.others.forEach(x => {\r\n    if(x.position === position){\r\n      ret = x.image\r\n      return\r\n    }\r\n  })\r\n  return ret\r\n}\r\n\r\n\r\nvar getDiff = function(startDate, endDate) {\r\n    var diff_start = startDate instanceof Date ? startDate :new Date(startDate)\r\n    var diff_end = endDate instanceof Date ? endDate :new Date(endDate)\r\n \r\n    diff_start = new Date(diff_start.getFullYear(), diff_start.getMonth()+1, diff_start.getDate())\r\n    diff_end = new Date(diff_end.getFullYear(), diff_end.getMonth()+1, diff_end.getDate())\r\n \r\n    var diff = Math.abs(diff_end.getTime() - diff_start.getTime())\r\n    diff = Math.ceil(diff / (1000 * 3600 * 24))\r\n \r\n    return diff;\r\n}\r\n\r\n\r\nvar regWork = (state, works, cv, to) => {\r\n  console.log('')\r\n  if(state.user.works.list_keys.indexOf(cv.date) == -1){\r\n    //여기서 등록이란건 변수에 저장을 했다는 의미(관리를 위해)\r\n    //해당 작업은 등록되지 않았으므로 등록처리\r\n    var diff = getDiff((new Date().toISOString().substr(0, 10)), cv.works.endDate)\r\n\r\n    works.push({\r\n      convs : cv,\r\n      to : [{\r\n        position: to,\r\n        file_save: cv.works.file_c_save,\r\n        file_real: cv.works.file_c_real,\r\n        state: cv.works.state_c, //각 클라이언트 state\r\n        avatar: getAvatar(state, to),\r\n        flag_upload : cv.works.flag_c_upload,\r\n        flag_sendDate : cv.works.flag_sendDate,  //새로추가\r\n        comment: cv.works.comment,\r\n      }], \r\n      due : '- ' + String(diff) + ' days',\r\n    })\r\n    state.user.works.list_keys.push(cv.date)\r\n  }else{\r\n    //이미 등록이 되어있다\r\n    //대상만 추가해준다.\r\n    works.forEach(x =>{\r\n      if(x.date === cv.date){\r\n        x.to.push({\r\n        position: to,\r\n        file_save: cv.works.file_c_save,\r\n        file_real: cv.works.file_c_real,\r\n        state: cv.works.state_c, //각 클라이언트 state\r\n        avatar: getAvatar(state, to),\r\n        flag_upload : cv.works.flag_c_upload,\r\n        flag_sendDate : cv.works.flag_sendDate, //새로추가  보낸시간\r\n        comment: cv.works.comment,\r\n      })\r\n        console.log('already registered work')\r\n        return\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport default new Vuex.Store({\r\n  state: {\r\n  \tbus: new Vue(),\r\n  \ttk: undefined,\r\n    today: '',\r\n    mountedCheck: [],\r\n    idxView: undefined,\r\n    p_work: {\r\n      idxWork: undefined,\r\n      idxSep: undefined,\r\n      idxSepKey: undefined,\r\n    },\r\n    user: {\r\n      id: '',\r\n      position: '',\r\n      image: '',\r\n      division: '',\r\n      company: '',\r\n      company_division: {},\r\n      state: '',\r\n      room: [],\r\n      room_num: 5,\r\n      works: {\r\n        list_keys : [], //date를 push해서 등록되잇는 work를 확인\r\n        schemaWork: [{\r\n          to: [{\r\n            position: String,\r\n            file_save: String,\r\n            file_real: String,\r\n            avatar: String,\r\n            state: String,\r\n            flag_upload : Boolean,\r\n          }],\r\n          convs: undefined,\r\n          date: String, //primary key\r\n          title: String, \r\n          contents: String,\r\n          favor: Boolean,\r\n          file_save: String,\r\n          file_real: String,\r\n        }], \r\n        toWork: [], //요청작업\r\n        fromWork:  [], //받은작업\r\n        toNotice:  [], //보낸알림\r\n        fromNotice: [], //받은알림\r\n        flag_upload : Boolean,\r\n      }, //array of convs\r\n    },\r\n    companys: [\r\n    ],\r\n    others: [\r\n    ],\r\n    socks:{\r\n      sock: undefined\r\n    },\r\n  },\r\n  mutations: {\r\n    setToday(state){\r\n      state.today = new Date().toISOString().substr(0, 10)\r\n\r\n      console.log('setToday::::', state.today)\r\n    },\r\n    delToken (state) {\r\n    \tstate.tk = null\r\n    },\r\n    setTk(state){\r\n      state.tk = localStorage.getItem('tk')\r\n    },\r\n    initUser (state, info){\r\n      state.user.id = info.id,\r\n      state.user.position = info.position,\r\n      state.user.division = info.division,\r\n      state.user.company = info.company,\r\n      state.user.idmage = info.image,\r\n      state.user.state = '출근'\r\n    },\r\n    initOthers(state, info){\r\n      state.others = info\r\n    },\r\n    setState(state, st){\r\n      state.user.state = st\r\n    },\r\n    initCompanys(state){\r\n      axios.post(`http://localhost:3000/apis/db/getCp`)\r\n      .then(r => {\r\n        if(Object.keys(r.data).length > 0){\r\n          state.companys = r.data\r\n        }\r\n      })\r\n      .catch(e => console.error(e))\r\n    },\r\n    initDivisions(state){\r\n      state.companys.forEach((x)=>{\r\n        if(x.name === state.user.company){\r\n          state.user.company_division = x.division\r\n        }\r\n      })\r\n    },\r\n    initSocks(state){\r\n      state.socks.sock = io('localhost:8082')\r\n    },\r\n    addNewMsg(state){\r\n      var i = 0\r\n      state.others.forEach(x=>{\r\n        //새메시지 상태 추가\r\n        state.others[i]['newMsg'] = {\r\n          msg : false,\r\n          work : false,\r\n          notice : false,\r\n        }\r\n        i++\r\n      })\r\n    },\r\n    initWorks(state){\r\n      state.user.works = {\r\n        list_keys : [],\r\n        toWork: [], //요청작업\r\n        fromWork:  [], //받은작업\r\n        toNotice:  [], //보낸알림\r\n        fromNotice: [], //받은알림\r\n      }\r\n        console.log('call initWorks :::')\r\n\r\n      axios.post('http://localhost:3000/apis/db/getWorks', {id: state.user.id})\r\n        .then(r =>{\r\n          r.data.list_works.forEach(x=>{\r\n            x.convs.forEach(cv=>{\r\n              if(cv.date != cv.works.flag_date){\r\n                return\r\n              }\r\n              if(cv.works.notice === true){\r\n                if(cv.works.by === state.user.id){\r\n                  //보낸알림 등록\r\n                  regWork(state, state.user.works.toNotice, cv, x.with)\r\n                  //state.user.works.toNotice.splice(0, 1)\r\n                }else{\r\n                  //받은알림 등록\r\n                  regWork(state, state.user.works.fromNotice, cv, x.with)\r\n                  //state.user.works.fromNotice.splice(0, 1)\r\n                }\r\n\r\n              }\r\n              else{\r\n                if(cv.works.by === state.user.id){\r\n                  //요청작업 등록\r\n                  regWork(state, state.user.works.toWork, cv, x.with)\r\n                  //state.user.works.toWork.splice(0, 1)\r\n                }else{\r\n                  //받은작업 등록\r\n                  regWork(state, state.user.works.fromWork, cv, x.with)\r\n                  //state.user.works.fromWork.splice(0, 1)\r\n\r\n                }\r\n\r\n              }\r\n            })\r\n\r\n          })\r\n\r\n          state.user.works.toWork.forEach(x=>{\r\n            var count = 0\r\n            console.log('check routine ::: store.js :::' )\r\n            x.to.forEach(y => {\r\n              if(y.state != x.convs.works.state_s){\r\n                count++\r\n              }\r\n            })\r\n            if(count == x.to.length){\r\n              console.log('서버 상태 업데이트 시키께 ::: store.js :::', x.convs.works.title)\r\n              x.convs.works.state_s = x.convs.works.state_c\r\n              x.convs.works.flag_sender = 'checkPage'\r\n              state.bus.$emit('sendWork', x)\r\n            }\r\n          })\r\n        }) \r\n        .catch(e=>{\r\n          console.error('getWorks in View.vue::::', e)\r\n        })\r\n\r\n    },\r\n    find_work(state, convs){\r\n      if(convs.works.notice === true){\r\n        if(convs.works.by === state.user.id){\r\n          state.p_work.idxSep = 2\r\n          state.p_work.idxSepKey = 'toNotice'\r\n        }else{\r\n          state.p_work.idxSep = 3\r\n          state.p_work.idxSepKey = 'fromNotice'\r\n        }\r\n\r\n      }\r\n      else{\r\n        if(convs.works.by === state.user.id){\r\n          state.p_work.idxSep = 0\r\n          state.p_work.idxSepKey = 'toWork'\r\n        }else{\r\n          state.p_work.idxSep = 1\r\n          state.p_work.idxSepKey = 'fromWork'\r\n        }\r\n      }\r\n      var jobs = state.user.works[state.p_work.idxSepKey]\r\n      console.log('find jobs ::: find_work ::: store.js :::', jobs)\r\n      console.log('length ::: find_work ::: store.js :::', jobs.length)\r\n    \r\n      var i = 0\r\n      var ret = 0\r\n      for(; i<jobs.length; i++){\r\n        if(jobs[i].convs.works.flag_date === convs.works.flag_date){\r\n          state.p_work.idxWork = i\r\n          console.log('find works ::: find_work ::: store.js :::', jobs[state.p_work.idxWork])\r\n          break\r\n        }\r\n      }\r\n\r\n    },\r\n    init_idxWork(state, idx_work){\r\n      state.p_work.idxWork = idx_work\r\n    }, \r\n    init_idxSepKey(state, idx_sep){\r\n      console.log('call init_idxSepkey :::', idx_sep)\r\n      switch(idx_sep){\r\n        case 0:\r\n          state.p_work.idxSepKey = 'toWork'\r\n          break\r\n        case 1:\r\n          state.p_work.idxSepKey = 'fromWork'\r\n          break\r\n        case 2:\r\n          state.p_work.idxSepKey = 'toNotice'\r\n          break\r\n        case 3:\r\n          state.p_work.idxSepKey = 'fromNotice'\r\n          break\r\n      }\r\n    }, \r\n    initIdxView(state, idx){\r\n      state.idxView = idx\r\n      this.commit('initWorks')\r\n    },\r\n    addRoom(state, to){\r\n      if(state.user.room.indexOf(to) != -1) return \r\n      if(state.user.room.length < state.user.room_num){\r\n        //add new room\r\n        state.user.room.push(to)\r\n      }\r\n      else{\r\n        state.user.room.pop()\r\n        state.user.room.push(to)\r\n      }\r\n    },\r\n    closeRoom(state, idx){\r\n      state.user.room.splice(idx, 1)\r\n    },\r\n    pushMountedCheck(state, eve){\r\n      state.mountedCheck.push(eve)\r\n    },\r\n  },\r\n  getters: {\r\n    getUser(state){\r\n      return state.user\r\n    },\r\n    getOthers(state){\r\n      return state.others\r\n    },\r\n    getCompanys(state){\r\n      return state.companys\r\n    },\r\n    getRoom(state){\r\n      return state.user.room\r\n    },\r\n    getComponents(state){\r\n      return state.components\r\n    },\r\n    getDivisions(state){\r\n      return state.user.company_division\r\n    },\r\n    getWorks(state){\r\n      return state.user.works\r\n    },\r\n    getMountedCheck(state){\r\n      return state.mountedCheck\r\n    },\r\n    getIdxView(state){\r\n      return state.idxView\r\n    },\r\n    getToday(state){\r\n      return state.today\r\n    },\r\n  },\r\n  actions: {\r\n\r\n  }\r\n})\r\n"]}]}