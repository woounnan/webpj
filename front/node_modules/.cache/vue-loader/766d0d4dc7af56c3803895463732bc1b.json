{"remainingRequest":"/work/webpj/front/node_modules/vue-loader/lib/index.js??vue-loader-options!/work/webpj/front/node_modules/basic-vue-chat/src/components/basic-vue-chat/BasicVueChat.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/work/webpj/front/node_modules/basic-vue-chat/src/components/basic-vue-chat/BasicVueChat.vue","mtime":1585582181076},{"path":"/work/webpj/front/node_modules/css-loader/index.js","mtime":1585582181472},{"path":"/work/webpj/front/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1585582184324},{"path":"/work/webpj/front/node_modules/postcss-loader/src/index.js","mtime":1585582183168},{"path":"/work/webpj/front/node_modules/sass-loader/dist/cjs.js","mtime":1585582183928},{"path":"/work/webpj/front/node_modules/cache-loader/dist/cjs.js","mtime":1585582181108},{"path":"/work/webpj/front/node_modules/vue-loader/lib/index.js","mtime":1585582184324}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n@import \"../../assets/scss/main.scss\";\r\n",{"version":3,"sources":["BasicVueChat.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4OA","file":"BasicVueChat.vue","sourceRoot":"node_modules/basic-vue-chat/src/components/basic-vue-chat","sourcesContent":["<template>\r\n  <div\r\n    class=\"basic-vue-chat\"\r\n    @click=\"setEmojiPickerToggle(false)\">\r\n    <section class=\"window\">\r\n      <header class=\"window__header__container\">\r\n        <slot name=\"header\">\r\n          {{ title }}\r\n        </slot>\r\n      </header>\r\n      <section\r\n        id=\"window__messages__container\"\r\n        class=\"window__messages__container\">\r\n        <slot>\r\n          <messages-list\r\n            :feed=\"feed\"\r\n            :author-id=\"authorId\"\r\n            class=\"messages-list\" />\r\n        </slot>\r\n      </section>\r\n      <div class=\"window__input__container\">\r\n        <slot name=\"input-container\">\r\n          <input-container\r\n            :sel=\"title\"\r\n            :toggle-emoji-picker=\"toggleEmojiPicker\"\r\n            @newOwnMessage=\"setInput\"\r\n            @openEmojiPicker=\"onOpenEmojiPicker\"\r\n          />\r\n        </slot>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport moment from 'moment'\r\nimport { scrollToBottom } from '../../helpers/scroll.js'\r\nimport MessagesList from './messages/MessagesList.vue'\r\nimport InputContainer from './input/InputContainer.vue'\r\nimport axios from 'axios'\r\nexport default {\r\n  name: 'BasicVueChat',\r\n  components: {\r\n    MessagesList,\r\n    InputContainer,\r\n  },\r\n  props: {\r\n    title: {\r\n      type: String,\r\n      default: 'Chat',\r\n      required: false\r\n    },\r\n    initialAuthorId: {\r\n      type: Number,\r\n      default: 0,\r\n      required: false\r\n    },\r\n    attachMock: {\r\n      type: Boolean,\r\n      default: false,\r\n      required: false\r\n    },\r\n    initialFeed: {\r\n      type: Array,\r\n      default: function () {\r\n        return []\r\n      },\r\n      required: false\r\n    },\r\n    newMessage: {\r\n      type: Object,\r\n      default: function () {\r\n        return {}\r\n      },\r\n      required: false\r\n    }\r\n  },\r\n  data: function () {\r\n    return {\r\n      feed: [],\r\n      authorId : this.$store.getters.getUser.id,\r\n      toggleEmojiPicker: false,\r\n      to : ''\r\n    }\r\n  },\r\n  watch: {\r\n    newMessage: function (newValue, oldValue) {\r\n      console.log('scrollbottom')\r\n      this.pushToFeed(newValue)\r\n      scrollToBottom()\r\n    }\r\n  },\r\n  mounted () {\r\n    if (this.attachMock) {\r\n      import('./mocks/mock-messages-list.js')\r\n        .then(mockData => {\r\n          this.feed = mockData.default.feed\r\n          this.setAuthorId(mockData.default.authorId)\r\n        })\r\n        .catch(error => {\r\n          console.error('Failed to load mock data from file. ', error)\r\n        })\r\n    } else {\r\n      this.feed = this.initialFeed\r\n    }\r\n    console.log('BasicChat::::', this.title)\r\n    this.recvMsg()\r\n    this.setRoom(this.title)\r\n\r\n    //Set when the window is opened later\r\n    this.$store.state.bus.$on('openDial', ()=>{\r\n    console.log('receive openDial!!!::::', this.title)\r\n    this.setRoom(this.title)\r\n    })\r\n  },\r\n  created() {\r\n    //create Component\r\n\r\n    //enroll Callback receiving msg from server\r\n  },\r\n  methods: {\r\n    setRoom(to){\r\n      //to is partner\r\n      console.log('BasicChat.vue:::call setRoom')\r\n      axios.post('http://192.168.132.129:3000/apis/db/getChat', {srcId: this.$store.getters.getUser.id, to: to})\r\n      .then(r =>{\r\n        this.feed = r.data.convs\r\n        scrollToBottom()\r\n      })\r\n      .catch(e => console.error(e.message))\r\n    },\r\n    recvMsg(){\r\n      console.log('call recvMsg!!!!!')\r\n      this.$store.state.socks.sock.on('msg', data =>{\r\n        //Data received is processed at here\r\n\r\n        if((data.header.to === this.$store.getters.getUser.position) && (this.$store.getters.getRoom.indexOf(data.header.from) != -1)){\r\n            this.onNewOwnMessage(data.msg)\r\n        }\r\n      })\r\n      //send work\r\n      var eve = 'work'\r\n      if(this.$store.getters.getMountedCheck.indexOf(eve) == -1){\r\n        this.$store.commit('pushMountedCheck', eve)\r\n        this.$store.state.bus.$on(eve,  (data)=>{\r\n        /* process when multiple receiver exist */\r\n\r\n        /* code here */\r\n        //수신자 배열을 루프돌아서 동일한 work 메시지를 전송시킨다.\r\n        console.log('selects in BasicChat.vue::::', data)\r\n\r\n        var selects = data.selects\r\n        delete data['selects']\r\n        console.log('check delete ::: BasicChat.vue :::', data)\r\n        var selDivisions = []\r\n        var others = this.$store.getters.getOthers\r\n\r\n        selects.forEach(ele=>{\r\n          //보내는 대상이 부서면\r\n          if(this.$store.getters.getDivisions.indexOf(ele) != -1){\r\n            //전체 유저 검색\r\n              for(var i = 0; i<others.length; i++){\r\n                if(others[i].division == ele){\r\n                  this.setInput('', '', '', data, others[i].position)\r\n                }\r\n              }\r\n                //나중에 또 안보내기 위해서 보낸 부서는 저장\r\n              selDivisions.push(ele)\r\n            }\r\n        })\r\n        //부서 설정이 아닌 사람 대상인 경우에 대해 보내기\r\n        selects.forEach(ele=>{\r\n            if(selDivisions.indexOf(ele) != -1){\r\n            }else{\r\n              this.setInput('', '', '', data, ele)\r\n            }\r\n        })\r\n        \r\n\r\n      })\r\n      }\r\n    },\r\n    setInput(message, image, imageUrl, works, to){\r\n      const msg = {\r\n        id: this.authorId,\r\n        position: this.$store.getters.getUser.position,\r\n        contents: message,\r\n        image: image,\r\n        imageUrl: imageUrl,\r\n        date: moment().format('HH:mm:ss'),\r\n        works: works\r\n      }\r\n      if(works != undefined){\r\n        console.log('set flag_date in BasicChat::::')\r\n        works.flag_date = msg.date\r\n      }\r\n      if(to === undefined){\r\n        to = this.title\r\n      }\r\n      const header = {\r\n        to : to,\r\n        from : this.$store.getters.getUser.position\r\n      }\r\n      this.$store.state.socks.sock.emit('msg', {msg: msg, header: header})\r\n      if(works != undefined){\r\n        setTimeout(()=>{\r\n          this.$store.state.socks.sock.emit('sock_initWorks', {id: this.$store.getters.getUser.id})\r\n          this.$store.commit('initWorks')\r\n        }, 50)\r\n      }\r\n      console.log('이사람에게 보냈어::::', to)\r\n      if(to === this.title){\r\n        this.onNewOwnMessage(msg)\r\n        console.log('TTTTAAAA')\r\n      }\r\n    },\r\n    setEmojiPickerToggle (toggle) {\r\n      this.toggleEmojiPicker = toggle\r\n    },\r\n    pushToFeed (element) {\r\n      this.feed.push(element)\r\n      setTimeout(()=>{\r\n        scrollToBottom()\r\n      }, 100)\r\n    },\r\n    onNewOwnMessage (data) {\r\n      this.pushToFeed(data)\r\n    },\r\n    onOpenEmojiPicker (toggle) {\r\n      this.setEmojiPickerToggle(toggle)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"../../assets/scss/main.scss\";\r\n</style>\r\n"]}]}